// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package SO1_Fase2_G13

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JuegosClient is the client API for Juegos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JuegosClient interface {
	AddLog(ctx context.Context, in *JuegoRequest, opts ...grpc.CallOption) (*RequestReply, error)
	GetLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Juegos_GetLogsClient, error)
}

type juegosClient struct {
	cc grpc.ClientConnInterface
}

func NewJuegosClient(cc grpc.ClientConnInterface) JuegosClient {
	return &juegosClient{cc}
}

func (c *juegosClient) AddLog(ctx context.Context, in *JuegoRequest, opts ...grpc.CallOption) (*RequestReply, error) {
	out := new(RequestReply)
	err := c.cc.Invoke(ctx, "/juego.Juegos/AddLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *juegosClient) GetLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Juegos_GetLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Juegos_ServiceDesc.Streams[0], "/juego.Juegos/getLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &juegosGetLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Juegos_GetLogsClient interface {
	Recv() (*JuegoReply, error)
	grpc.ClientStream
}

type juegosGetLogsClient struct {
	grpc.ClientStream
}

func (x *juegosGetLogsClient) Recv() (*JuegoReply, error) {
	m := new(JuegoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JuegosServer is the server API for Juegos service.
// All implementations must embed UnimplementedJuegosServer
// for forward compatibility
type JuegosServer interface {
	AddLog(context.Context, *JuegoRequest) (*RequestReply, error)
	GetLogs(*Empty, Juegos_GetLogsServer) error
	mustEmbedUnimplementedJuegosServer()
}

// UnimplementedJuegosServer must be embedded to have forward compatible implementations.
type UnimplementedJuegosServer struct {
}

func (UnimplementedJuegosServer) AddLog(context.Context, *JuegoRequest) (*RequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLog not implemented")
}
func (UnimplementedJuegosServer) GetLogs(*Empty, Juegos_GetLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedJuegosServer) mustEmbedUnimplementedJuegosServer() {}

// UnsafeJuegosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JuegosServer will
// result in compilation errors.
type UnsafeJuegosServer interface {
	mustEmbedUnimplementedJuegosServer()
}

func RegisterJuegosServer(s grpc.ServiceRegistrar, srv JuegosServer) {
	s.RegisterService(&Juegos_ServiceDesc, srv)
}

func _Juegos_AddLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JuegoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JuegosServer).AddLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/juego.Juegos/AddLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JuegosServer).AddLog(ctx, req.(*JuegoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Juegos_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JuegosServer).GetLogs(m, &juegosGetLogsServer{stream})
}

type Juegos_GetLogsServer interface {
	Send(*JuegoReply) error
	grpc.ServerStream
}

type juegosGetLogsServer struct {
	grpc.ServerStream
}

func (x *juegosGetLogsServer) Send(m *JuegoReply) error {
	return x.ServerStream.SendMsg(m)
}

// Juegos_ServiceDesc is the grpc.ServiceDesc for Juegos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Juegos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "juego.Juegos",
	HandlerType: (*JuegosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLog",
			Handler:    _Juegos_AddLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getLogs",
			Handler:       _Juegos_GetLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/juego.proto",
}
